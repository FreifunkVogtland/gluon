From: Sven Eckelmann <sven@narfation.org>
Date: Fri, 2 Dec 2016 15:36:08 +0100
Subject: ath9k: work around AR_CFG 0xdeadbeef chip hang

QCA 802.11n chips (especially AR9330/AR9340) sometimes end up in a state in
which a read of AR_CFG always returns 0xdeadbeef. This should not happen
when when the power_mode of the device is ATH9K_PM_AWAKE.

This problem is not yet detected by any other workaround in ath9k. No way
is known to reproduce the problem easily.

Signed-off-by: Simon Wunderlich <simon.wunderlich@open-mesh.com>
[sven.eckelmann@open-mesh.com: port to recent ath9k, add commit message]
Signed-off-by: Sven Eckelmann <sven.eckelmann@open-mesh.com>

diff --git a/package/kernel/mac80211/patches/950-ath9k_work-around-AR_CFG-0xdeadbeef-chip-hang.patch b/package/kernel/mac80211/patches/950-ath9k_work-around-AR_CFG-0xdeadbeef-chip-hang.patch
new file mode 100644
index 0000000000000000000000000000000000000000..e5a8c8147cfa5ea65a44c6e12981c7bec3b3b901
--- /dev/null
+++ b/package/kernel/mac80211/patches/950-ath9k_work-around-AR_CFG-0xdeadbeef-chip-hang.patch
@@ -0,0 +1,137 @@
+From: Simon Wunderlich <simon.wunderlich@open-mesh.com>
+Date: Thu, 17 Nov 2016 09:36:13 +0100
+Subject: [RFC v2 1/2] ath9k: work around AR_CFG 0xdeadbeef chip hang
+
+QCA 802.11n chips (especially AR9330/AR9340) sometimes end up in a state in
+which a read of AR_CFG always returns 0xdeadbeef. This should not happen
+when when the power_mode of the device is ATH9K_PM_AWAKE.
+
+This problem is not yet detected by any other workaround in ath9k. No way
+is known to reproduce the problem easily.
+
+Signed-off-by: Simon Wunderlich <simon.wunderlich@open-mesh.com>
+[sven.eckelmann@open-mesh.com: port to recent ath9k, add commit message]
+Signed-off-by: Sven Eckelmann <sven.eckelmann@open-mesh.com>
+---
+ drivers/net/wireless/ath/ath9k/ath9k.h |  3 +++
+ drivers/net/wireless/ath/ath9k/debug.c |  1 +
+ drivers/net/wireless/ath/ath9k/debug.h |  1 +
+ drivers/net/wireless/ath/ath9k/init.c  |  1 +
+ drivers/net/wireless/ath/ath9k/link.c  | 31 +++++++++++++++++++++++++++++++
+ drivers/net/wireless/ath/ath9k/main.c  |  4 ++++
+ 6 files changed, 41 insertions(+)
+
+--- a/drivers/net/wireless/ath/ath9k/ath9k.h
++++ b/drivers/net/wireless/ath/ath9k/ath9k.h
+@@ -745,11 +745,13 @@ void ath9k_csa_update(struct ath_softc *
+ #define ATH_ANI_MAX_SKIP_COUNT    10
+ #define ATH_PAPRD_TIMEOUT         100 /* msecs */
+ #define ATH_PLL_WORK_INTERVAL     100
++#define ATH_HANG_WORK_INTERVAL    30000
+ 
+ void ath_hw_check_work(struct work_struct *work);
+ void ath_reset_work(struct work_struct *work);
+ bool ath_hw_check(struct ath_softc *sc);
+ void ath_hw_pll_work(struct work_struct *work);
++void ath_hw_hang_work(struct work_struct *work);
+ void ath_paprd_calibrate(struct work_struct *work);
+ void ath_ani_calibrate(unsigned long data);
+ void ath_start_ani(struct ath_softc *sc);
+@@ -1078,6 +1080,7 @@ struct ath_softc {
+ #endif
+ 	struct delayed_work hw_check_work;
+ 	struct delayed_work hw_pll_work;
++	struct delayed_work hw_hang_work;
+ 	struct timer_list sleep_timer;
+ 
+ #ifdef CPTCFG_ATH9K_BTCOEX_SUPPORT
+--- a/drivers/net/wireless/ath/ath9k/debug.c
++++ b/drivers/net/wireless/ath/ath9k/debug.c
+@@ -765,6 +765,7 @@ static int read_file_reset(struct seq_fi
+ 		[RESET_TYPE_CALIBRATION] = "Calibration error",
+ 		[RESET_TX_DMA_ERROR] = "Tx DMA stop error",
+ 		[RESET_RX_DMA_ERROR] = "Rx DMA stop error",
++		[RESET_TYPE_DEADBEEF] = "deadbeef hang",
+ 	};
+ 	int i;
+ 
+--- a/drivers/net/wireless/ath/ath9k/debug.h
++++ b/drivers/net/wireless/ath/ath9k/debug.h
+@@ -52,6 +52,7 @@ enum ath_reset_type {
+ 	RESET_TYPE_CALIBRATION,
+ 	RESET_TX_DMA_ERROR,
+ 	RESET_RX_DMA_ERROR,
++	RESET_TYPE_DEADBEEF,
+ 	__RESET_TYPE_MAX
+ };
+ 
+--- a/drivers/net/wireless/ath/ath9k/init.c
++++ b/drivers/net/wireless/ath/ath9k/init.c
+@@ -689,6 +689,7 @@ static int ath9k_init_softc(u16 devid, s
+ 	INIT_WORK(&sc->paprd_work, ath_paprd_calibrate);
+ 	INIT_DELAYED_WORK(&sc->hw_pll_work, ath_hw_pll_work);
+ 	INIT_DELAYED_WORK(&sc->hw_check_work, ath_hw_check_work);
++	INIT_DELAYED_WORK(&sc->hw_hang_work, ath_hw_hang_work);
+ 
+ 	ath9k_init_channel_context(sc);
+ 
+--- a/drivers/net/wireless/ath/ath9k/link.c
++++ b/drivers/net/wireless/ath/ath9k/link.c
+@@ -142,6 +142,37 @@ void ath_hw_pll_work(struct work_struct
+ 				     msecs_to_jiffies(ATH_PLL_WORK_INTERVAL));
+ }
+ 
++static bool ath_hw_hang_deadbeef(struct ath_softc *sc)
++{
++	struct ath_common *common = ath9k_hw_common(sc->sc_ah);
++	u32 reg;
++
++	/* check for stucked MAC */
++	ath9k_ps_wakeup(sc);
++	reg = REG_READ(sc->sc_ah, AR_CFG);
++	ath9k_ps_restore(sc);
++
++	if (reg != 0xdeadbeef)
++		return false;
++
++	ath_dbg(common, RESET,
++		"0xdeadbeef hang is detected. Schedule chip reset\n");
++	ath9k_queue_reset(sc, RESET_TYPE_DEADBEEF);
++
++	return true;
++}
++
++void ath_hw_hang_work(struct work_struct *work)
++{
++	struct ath_softc *sc = container_of(work, struct ath_softc,
++					    hw_hang_work.work);
++
++	ath_hw_hang_deadbeef(sc);
++
++	ieee80211_queue_delayed_work(sc->hw, &sc->hw_hang_work,
++				     msecs_to_jiffies(ATH_HANG_WORK_INTERVAL));
++}
++
+ /*
+  * PA Pre-distortion.
+  */
+--- a/drivers/net/wireless/ath/ath9k/main.c
++++ b/drivers/net/wireless/ath/ath9k/main.c
+@@ -185,6 +185,7 @@ static void __ath_cancel_work(struct ath
+ 	cancel_work_sync(&sc->paprd_work);
+ 	cancel_delayed_work_sync(&sc->hw_check_work);
+ 	cancel_delayed_work_sync(&sc->hw_pll_work);
++	cancel_delayed_work_sync(&sc->hw_hang_work);
+ 
+ #ifdef CPTCFG_ATH9K_BTCOEX_SUPPORT
+ 	if (ath9k_hw_mci_is_enabled(sc->sc_ah))
+@@ -207,6 +208,9 @@ void ath_restart_work(struct ath_softc *
+ 		ieee80211_queue_delayed_work(sc->hw, &sc->hw_pll_work,
+ 				     msecs_to_jiffies(ATH_PLL_WORK_INTERVAL));
+ 
++	ieee80211_queue_delayed_work(sc->hw, &sc->hw_hang_work,
++				     msecs_to_jiffies(ATH_HANG_WORK_INTERVAL));
++
+ 	ath_start_ani(sc);
+ }
+ 
