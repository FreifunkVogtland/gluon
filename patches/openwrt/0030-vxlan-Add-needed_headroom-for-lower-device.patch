From: Sven Eckelmann <sven@narfation.org>
Date: Sat, 12 Dec 2020 13:43:54 +0100
Subject: vxlan: Add needed_headroom for lower device

It was observed that sending data via batadv over vxlan (on top of
wireguard) reduced the performance massively compared to raw ethernet or
batadv on raw ethernet. A check of perf data showed that the
vxlan_build_skb was calling all the time pskb_expand_head to allocate
enough headroom for:

  min_headroom = LL_RESERVED_SPACE(dst->dev) + dst->header_len
                + VXLAN_HLEN + iphdr_len;

But the vxlan_config_apply only requested needed headroom for:

  lowerdev->hard_header_len + VXLAN6_HEADROOM or VXLAN_HEADROOM

So it completely ignored the needed_headroom of the lower device. The first
caller of net_dev_xmit could therefore never make sure that enough headroom
was allocated for the rest of the transmit path.

Signed-off-by: Sven Eckelmann <sven@narfation.org>

diff --git a/target/linux/generic/backport-4.14/9990-vxlan-Add-needed_headroom-for-lower-device.patch b/target/linux/generic/backport-4.14/9990-vxlan-Add-needed_headroom-for-lower-device.patch
new file mode 100644
index 0000000000000000000000000000000000000000..ac5d9b41c7c25e9fe1df1b830025d1b1f1aa03b9
--- /dev/null
+++ b/target/linux/generic/backport-4.14/9990-vxlan-Add-needed_headroom-for-lower-device.patch
@@ -0,0 +1,37 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Thu, 26 Nov 2020 13:52:46 +0100
+Subject: vxlan: Add needed_headroom for lower device
+
+It was observed that sending data via batadv over vxlan (on top of
+wireguard) reduced the performance massively compared to raw ethernet or
+batadv on raw ethernet. A check of perf data showed that the
+vxlan_build_skb was calling all the time pskb_expand_head to allocate
+enough headroom for:
+
+  min_headroom = LL_RESERVED_SPACE(dst->dev) + dst->header_len
+  		+ VXLAN_HLEN + iphdr_len;
+
+But the vxlan_config_apply only requested needed headroom for:
+
+  lowerdev->hard_header_len + VXLAN6_HEADROOM or VXLAN_HEADROOM
+
+So it completely ignored the needed_headroom of the lower device. The first
+caller of net_dev_xmit could therefore never make sure that enough headroom
+was allocated for the rest of the transmit path.
+
+Cc: Annika Wickert <annika.wickert@exaring.de>
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Tested-by: Annika Wickert <aw@awlnx.space>
+
+diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
+index 927d62c76a604c3214846e005e1203e82076061f..b54f56f264f3226a4a8bfe820115b8787da9e49f 100644
+--- a/drivers/net/vxlan.c
++++ b/drivers/net/vxlan.c
+@@ -3178,6 +3178,7 @@ static void vxlan_config_apply(struct net_device *dev,
+ 		dev->gso_max_segs = lowerdev->gso_max_segs;
+ 
+ 		needed_headroom = lowerdev->hard_header_len;
++		needed_headroom += lowerdev->needed_headroom;
+ 
+ 		max_mtu = lowerdev->mtu - (use_ipv6 ? VXLAN6_HEADROOM :
+ 					   VXLAN_HEADROOM);
diff --git a/target/linux/generic/backport-4.14/9991-vxlan-Copy-needed_tailroom-from-lowerdev.patch b/target/linux/generic/backport-4.14/9991-vxlan-Copy-needed_tailroom-from-lowerdev.patch
new file mode 100644
index 0000000000000000000000000000000000000000..29a0a373dca841d20b9c73e4ca7d707d0e144c33
--- /dev/null
+++ b/target/linux/generic/backport-4.14/9991-vxlan-Copy-needed_tailroom-from-lowerdev.patch
@@ -0,0 +1,23 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Thu, 26 Nov 2020 13:52:47 +0100
+Subject: vxlan: Copy needed_tailroom from lowerdev
+
+While vxlan doesn't need any extra tailroom, the lowerdev might need it. In
+that case, copy it over to reduce the chance for additional (re)allocations
+in the transmit path.
+
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+
+diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
+index b54f56f264f3226a4a8bfe820115b8787da9e49f..5b4b34a0e0866f6e995dc8422d4a6e467844f380 100644
+--- a/drivers/net/vxlan.c
++++ b/drivers/net/vxlan.c
+@@ -3180,6 +3180,8 @@ static void vxlan_config_apply(struct net_device *dev,
+ 		needed_headroom = lowerdev->hard_header_len;
+ 		needed_headroom += lowerdev->needed_headroom;
+ 
++		dev->needed_tailroom = lowerdev->needed_tailroom;
++
+ 		max_mtu = lowerdev->mtu - (use_ipv6 ? VXLAN6_HEADROOM :
+ 					   VXLAN_HEADROOM);
+ 		if (max_mtu < ETH_MIN_MTU)
