From: Sven Eckelmann <sven@narfation.org>
Date: Sun, 4 Sep 2016 15:06:34 +0200
Subject: batman-adv: Upgrade to batman-adv 2016.3

Signed-off-by: Sven Eckelmann <sven@narfation.org>

diff --git a/alfred/Makefile b/alfred/Makefile
index f1d7c6e..4eae249 100644
--- a/alfred/Makefile
+++ b/alfred/Makefile
@@ -8,15 +8,15 @@
 include $(TOPDIR)/rules.mk
 
 #
-# The latest alfred git hash in PKG_REV can be obtained from http://git.open-mesh.org/alfred.git
+# The latest alfred git hash in PKG_REV can be obtained from https://git.open-mesh.org/alfred.git
 #
 PKG_NAME:=alfred
-PKG_VERSION:=2015.1
+PKG_VERSION:=2016.3
 PKG_RELEASE:=0
-PKG_MD5SUM:=fcce70cd8da764ee91c8cd2cbfa14362
+PKG_MD5SUM:=8a33199b8926a960889d1cf08535ef63
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
-PKG_SOURCE_URL:=http://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
+PKG_SOURCE_URL:=https://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
 PKG_LICENSE:=GPL-2.0
 
 include $(INCLUDE_DIR)/package.mk
@@ -24,11 +24,11 @@ include $(INCLUDE_DIR)/package.mk
 init-y := alfred
 
 define Package/alfred
-  URL:=http://www.open-mesh.org/
+  URL:=https://www.open-mesh.org/
   SECTION:=net
   CATEGORY:=Network
   TITLE:=A.L.F.R.E.D. - Almighty Lightweight Fact Remote Exchange Daemon
-  DEPENDS:= +libc +kmod-ipv6 +librt +batman-adv-visdata \
+  DEPENDS:= +libc @IPV6 +libnl-tiny +librt +batman-adv-visdata \
 	  +ALFRED_NEEDS_lua:lua \
 	  +ALFRED_NEEDS_libgps:libgps
 endef
@@ -60,10 +60,13 @@ endef
 MAKE_ALFRED_FLAGS=\
 	CONFIG_ALFRED_VIS=$(if $(CONFIG_PACKAGE_ALFRED_VIS),y,n) \
 	CONFIG_ALFRED_GPSD=$(if $(CONFIG_PACKAGE_ALFRED_GPSD),y,n) \
-	CONFIG_ALFRED_CAPABILITIES=n
+	CONFIG_ALFRED_CAPABILITIES=n \
+        LIBNL_NAME="libnl-tiny" \
+        LIBNL_GENL_NAME="libnl-tiny"
 
 TARGET_CFLAGS  += -ffunction-sections -fdata-sections -flto
 TARGET_LDFLAGS += -Wl,--gc-sections -fuse-linker-plugin
+TARGET_CPPFLAGS += -D_GNU_SOURCE
 
 define Build/Compile
 	CFLAGS="$(TARGET_CPPFLAGS) $(TARGET_CFLAGS)" \
diff --git a/alfred/files/alfred.init b/alfred/files/alfred.init
index 8e1f11d..4c9a9e1 100755
--- a/alfred/files/alfred.init
+++ b/alfred/files/alfred.init
@@ -40,9 +40,8 @@ wait_for_dir()
 wait_for_ll_address()
 {
 	local iface="$1"
-	local timeout
+	local timeout=30
 
-	timeout=30
 	echo "${initscript}: waiting $timeout secs for $iface address..."
 	for i in $(seq $timeout); do
 		# We look for
diff --git a/alfred/patches/0001-alfred-adjust-intervals.patch b/alfred/patches/0001-alfred-adjust-intervals.patch
index df70eea..fd752bb 100644
--- a/alfred/patches/0001-alfred-adjust-intervals.patch
+++ b/alfred/patches/0001-alfred-adjust-intervals.patch
@@ -1,6 +1,8 @@
+diff --git a/alfred.h b/alfred.h
+index a9906c8..b33f13a 100644
 --- a/alfred.h
 +++ b/alfred.h
-@@ -33,10 +33,10 @@
+@@ -34,10 +34,10 @@
  #include "list.h"
  #include "packet.h"
  
diff --git a/alfred/patches/0002-alfred-use-batman-adv-visdata.patch b/alfred/patches/0002-alfred-use-batman-adv-visdata.patch
index a28b6a4..25104aa 100644
--- a/alfred/patches/0002-alfred-use-batman-adv-visdata.patch
+++ b/alfred/patches/0002-alfred-use-batman-adv-visdata.patch
@@ -1,25 +1,16 @@
+diff --git a/batadv_query.c b/batadv_query.c
+index a671b79..b377cc9 100644
 --- a/batadv_query.c
 +++ b/batadv_query.c
-@@ -91,8 +91,10 @@ int ipv6_to_mac(const struct in6_addr *a
+@@ -138,6 +138,7 @@ int ipv6_to_mac(const struct in6_addr *addr, struct ether_addr *mac)
+ 
  int batadv_interface_check(const char *mesh_iface)
  {
- 	char *debugfs_mnt;
 +#if 0
  	char full_path[MAX_PATH + 1];
  	FILE *f;
-+#endif
- 
- 	debugfs_mnt = debugfs_mount(NULL);
- 	if (!debugfs_mnt) {
-@@ -100,6 +102,7 @@ int batadv_interface_check(const char *m
- 		return -1;
- 	}
  
-+#if 0
- 	debugfs_make_path(DEBUG_BATIF_PATH_FMT "/" DEBUG_TRANSTABLE_GLOBAL,
- 			  mesh_iface, full_path, sizeof(full_path));
- 	f = fopen(full_path, "r");
-@@ -121,6 +124,7 @@ int batadv_interface_check(const char *m
+@@ -162,6 +163,7 @@ int batadv_interface_check(const char *mesh_iface)
  		return -1;
  	}
  	fclose(f);
@@ -27,9 +18,9 @@
  
  	return 0;
  }
-@@ -150,8 +154,7 @@ struct ether_addr *translate_mac(const c
- 	if (!debugfs_mnt)
- 		goto out;
+@@ -185,8 +187,7 @@ static int translate_mac_debugfs(const char *mesh_iface,
+ 	int line_invalid;
+ 	bool found = false;
  
 -	debugfs_make_path(DEBUG_BATIF_PATH_FMT "/" DEBUG_TRANSTABLE_GLOBAL,
 -			  mesh_iface, full_path, sizeof(full_path));
@@ -37,9 +28,9 @@
  
  	f = fopen(full_path, "r");
  	if (!f)
-@@ -232,8 +235,7 @@ uint8_t get_tq(const char *mesh_iface, s
- 	if (!debugfs_mnt)
- 		goto out;
+@@ -293,8 +294,7 @@ static int get_tq_debugfs(const char *mesh_iface, struct ether_addr *mac,
+ 
+ 	memcpy(&in_mac, mac, sizeof(in_mac));
  
 -	debugfs_make_path(DEBUG_BATIF_PATH_FMT "/" DEBUG_ORIGINATORS,
 -			  mesh_iface, full_path, sizeof(full_path));
@@ -47,13 +38,15 @@
  
  	f = fopen(full_path, "r");
  	if (!f)
+diff --git a/vis/vis.c b/vis/vis.c
+index d6bac41..b865508 100644
 --- a/vis/vis.c
 +++ b/vis/vis.c
-@@ -325,7 +325,7 @@ static int parse_orig_list(struct global
+@@ -541,7 +541,7 @@ static int parse_orig_list_debugfs(struct globals *globals)
  	char path[1024];
  	struct vis_list_entry *v_entry;
  
--	snprintf(path, sizeof(path), "/sys/kernel/debug/batman_adv/%s/originators", globals->interface);
+-	debugfs_make_path(DEBUG_BATIF_PATH_FMT "/" "originators", globals->interface, path, sizeof(path));
 +	snprintf(path, sizeof(path), "/tmp/batman-adv-visdata/%s/originators", globals->interface);
  	fbuf = read_file(path);
  	if (!fbuf)
diff --git a/alfred/patches/0003-alfred-vis-Fix-netlink-function-fallback.patch b/alfred/patches/0003-alfred-vis-Fix-netlink-function-fallback.patch
new file mode 100644
index 0000000..7115273
--- /dev/null
+++ b/alfred/patches/0003-alfred-vis-Fix-netlink-function-fallback.patch
@@ -0,0 +1,40 @@
+From 9729239306edd6c0d122b0222626988f44d9b1cf Mon Sep 17 00:00:00 2001
+From: Sven Eckelmann <sven@narfation.org>
+Date: Thu, 22 Sep 2016 23:41:20 +0200
+Subject: [PATCH] alfred: vis: Fix netlink function fallback
+
+The netlink functions return -EOPNOTSUPP when the kernel doesn't support
+the netlink command. The caller can then fall back to debugfs. So check for
+-EOPNOTSUPP and not EOPNOTSUPP.
+
+Fixes: bca55a86fecd ("alfred: vis: Add support for netlink")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+---
+ vis/vis.c | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/vis/vis.c b/vis/vis.c
+index b865508..677f8aa 100644
+--- a/vis/vis.c
++++ b/vis/vis.c
+@@ -361,7 +361,7 @@ static int parse_transtable_local(struct globals *globals)
+ 	int ret;
+ 
+ 	ret = parse_transtable_local_netlink(globals);
+-	if (ret != EOPNOTSUPP)
++	if (ret != -EOPNOTSUPP)
+ 		return ret;
+ 
+ 	return parse_transtable_local_debugfs(globals);
+@@ -602,7 +602,7 @@ static int parse_orig_list(struct globals *globals)
+ 	int ret;
+ 
+ 	ret = parse_orig_list_netlink(globals);
+-	if (ret != EOPNOTSUPP)
++	if (ret != -EOPNOTSUPP)
+ 		return ret;
+ 
+ 	return parse_orig_list_debugfs(globals);
+-- 
+2.9.3
+
diff --git a/batctl/Makefile b/batctl/Makefile
index 8cf2d17..36cea26 100644
--- a/batctl/Makefile
+++ b/batctl/Makefile
@@ -9,12 +9,12 @@ include $(TOPDIR)/rules.mk
 
 PKG_NAME:=batctl
 
-PKG_VERSION:=2015.1
-PKG_RELEASE:=1
-PKG_MD5SUM:=3db00af0b3cf55136babe06aa666e15f
+PKG_VERSION:=2016.3
+PKG_RELEASE:=0
+PKG_MD5SUM:=533cbbe981bd0e9fc9ec73ed59379960
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
-PKG_SOURCE_URL:=http://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
+PKG_SOURCE_URL:=https://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
 PKG_LICENSE:=GPL-2.0
 
 PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(PKG_NAME)-$(PKG_VERSION)
@@ -22,7 +22,7 @@ PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(PKG_NAME)-$(PKG_VERSION)
 include $(INCLUDE_DIR)/package.mk
 
 define Package/batctl
-  URL:=http://www.open-mesh.org/
+  URL:=https://www.open-mesh.org/
   SECTION:=net
   CATEGORY:=Network
   DEPENDS:=+kmod-batman-adv +libnl-tiny +libc
@@ -55,7 +55,8 @@ MAKE_BATCTL_ENV += \
         CPPFLAGS="$(TARGET_CPPFLAGS)" \
         CFLAGS="$(TARGET_CFLAGS)" \
         LDFLAGS="$(TARGET_LDFLAGS)" \
-        LIBNL_NAME="libnl-tiny"
+        LIBNL_NAME="libnl-tiny" \
+        LIBNL_GENL_NAME="libnl-tiny"
 
 MAKE_BATCTL_ARGS += \
         REVISION="$(PKG_BATCTL_SHORTREV)" \
diff --git a/batctl/patches/0001-batctl-Work-around-uclibc-collision-for-__unused.patch b/batctl/patches/0001-batctl-Work-around-uclibc-collision-for-__unused.patch
new file mode 100644
index 0000000..558bc9d
--- /dev/null
+++ b/batctl/patches/0001-batctl-Work-around-uclibc-collision-for-__unused.patch
@@ -0,0 +1,77 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sun, 4 Sep 2016 20:20:40 +0200
+Subject: [PATCH] batctl: Work around uclibc collision for __unused
+
+uclibc on 64 bit systems uses struct members called __unused. These
+conflict with the definition of __unused in batctl. Such a conflict results
+in a build error because the struct member will be replaced with the
+__attribute__((unused)).
+
+This can be avoided by renaming it to the Linux kernel name
+"__maybe_unused".
+
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+---
+ genl.c     | 4 ++--
+ main.h     | 2 +-
+ tp_meter.c | 5 +++--
+ 3 files changed, 6 insertions(+), 5 deletions(-)
+
+diff --git a/genl.c b/genl.c
+index b6f66fd..36fc27e 100644
+--- a/genl.c
++++ b/genl.c
+@@ -34,7 +34,7 @@
+ 
+ #include "batman_adv.h"
+ 
+-static int mcast_error_handler(struct sockaddr_nl *nla __unused,
++static int mcast_error_handler(struct sockaddr_nl *nla __maybe_unused,
+ 			       struct nlmsgerr *err, void *arg)
+ {
+ 	int *ret = arg;
+@@ -42,7 +42,7 @@ static int mcast_error_handler(struct sockaddr_nl *nla __unused,
+ 	return NL_STOP;
+ }
+ 
+-static int mcast_ack_handler(struct nl_msg *msg __unused, void *arg)
++static int mcast_ack_handler(struct nl_msg *msg __maybe_unused, void *arg)
+ {
+ 	int *ret = arg;
+ 	*ret = 0;
+diff --git a/main.h b/main.h
+index 01f70e8..12c33b7 100644
+--- a/main.h
++++ b/main.h
+@@ -47,7 +47,7 @@
+ #endif
+ 
+ #define __packed __attribute((packed))   /* linux kernel compat */
+-#define __unused __attribute__((unused))
++#define __maybe_unused __attribute__((unused))
+ #define BIT(nr)                 (1UL << (nr)) /* linux kernel compat */
+ 
+ typedef uint8_t u8; /* linux kernel compat */
+diff --git a/tp_meter.c b/tp_meter.c
+index 43c19da..a402e45 100644
+--- a/tp_meter.c
++++ b/tp_meter.c
+@@ -66,7 +66,7 @@ struct tp_cookie {
+ 	uint32_t cookie;
+ };
+ 
+-static int tpmeter_nl_print_error(struct sockaddr_nl *nla __unused,
++static int tpmeter_nl_print_error(struct sockaddr_nl *nla __maybe_unused,
+ 				  struct nlmsgerr *nlerr,
+ 				  void *arg)
+ {
+@@ -236,7 +236,8 @@ out:
+ 	return err;
+ }
+ 
+-static int no_seq_check(struct nl_msg *msg __unused, void *arg __unused)
++static int no_seq_check(struct nl_msg *msg __maybe_unused,
++			void *arg __maybe_unused)
+ {
+ 	return NL_OK;
+ }
diff --git a/batman-adv/Config.in b/batman-adv/Config.in
index 86fc795..48092e7 100644
--- a/batman-adv/Config.in
+++ b/batman-adv/Config.in
@@ -24,3 +24,7 @@ config KMOD_BATMAN_ADV_NC
 	depends on PACKAGE_kmod-batman-adv
 	default n
 
+config KMOD_BATMAN_ADV_BATMAN_V
+	bool "enable batman v routing algorithm"
+	depends on PACKAGE_kmod-batman-adv
+	default n
diff --git a/batman-adv/Makefile b/batman-adv/Makefile
index 7e43de4..e12c166 100644
--- a/batman-adv/Makefile
+++ b/batman-adv/Makefile
@@ -10,12 +10,12 @@ include $(TOPDIR)/rules.mk
 
 PKG_NAME:=batman-adv
 
-PKG_VERSION:=2015.1
-PKG_RELEASE:=1
-PKG_MD5SUM:=45f98d315b4290dc208e01190193c514
+PKG_VERSION:=2016.3
+PKG_RELEASE:=0
+PKG_MD5SUM:=63f530a62c3d48ed0c7e42f47dfa4d4d
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
-PKG_SOURCE_URL:=http://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
+PKG_SOURCE_URL:=https://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
 PKG_LICENSE:=GPL-2.0
 
 PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(PKG_NAME)-$(PKG_VERSION)
@@ -24,13 +24,13 @@ include $(INCLUDE_DIR)/package.mk
 include $(INCLUDE_DIR)/kernel.mk
 
 define KernelPackage/batman-adv
-  URL:=http://www.open-mesh.org/
+  URL:=https://www.open-mesh.org/
   MAINTAINER:=Marek Lindner <mareklindner@neomailbox.ch>
   SUBMENU:=Network Support
-  DEPENDS:=+KMOD_BATMAN_ADV_BLA:kmod-lib-crc16 +kmod-crypto-core +kmod-crypto-crc32c +kmod-lib-crc32c
+  DEPENDS:=+KMOD_BATMAN_ADV_BLA:kmod-lib-crc16 +kmod-crypto-crc32c +kmod-lib-crc32c +kmod-cfg80211
   TITLE:=B.A.T.M.A.N. Adv
   FILES:=$(PKG_BUILD_DIR)/net/batman-adv/batman-adv.$(LINUX_KMOD_SUFFIX)
-  AUTOLOAD:=$(call AutoLoad,50,batman-adv)
+  AUTOLOAD:=$(call AutoLoad,50,cfg80211 batman-adv)
 endef
 
 define KernelPackage/batman-adv/description
@@ -47,29 +47,49 @@ define Package/kmod-batman-adv/conffiles
 /etc/config/batman-adv
 endef
 
-MAKE_BATMAN_ADV_ARGS += \
-	CROSS_COMPILE="$(TARGET_CROSS)" \
-	KERNELPATH="$(LINUX_DIR)" \
-	ARCH="$(LINUX_KARCH)" \
-	PATH="$(TARGET_PATH)" \
-	SUBDIRS="$(PKG_BUILD_DIR)" \
-	PWD="$(PKG_BUILD_DIR)" \
-	LINUX_VERSION="$(LINUX_VERSION)" \
+PKG_EXTRA_KCONFIG:= \
+	CONFIG_BATMAN_ADV=m \
 	CONFIG_BATMAN_ADV_DEBUG=$(if $(CONFIG_KMOD_BATMAN_ADV_DEBUG_LOG),y,n) \
 	CONFIG_BATMAN_ADV_BLA=$(if $(CONFIG_KMOD_BATMAN_ADV_BLA),y,n) \
 	CONFIG_BATMAN_ADV_DAT=$(if $(CONFIG_KMOD_BATMAN_ADV_DAT),y,n) \
 	CONFIG_BATMAN_ADV_MCAST=$(if $(CONFIG_KMOD_BATMAN_ADV_MCAST),y,n) \
 	CONFIG_BATMAN_ADV_NC=$(if $(CONFIG_KMOD_BATMAN_ADV_NC),y,n) \
-	REVISION="" all
+	CONFIG_BATMAN_ADV_BATMAN_V=$(if $(CONFIG_KMOD_BATMAN_ADV_BATMAN_V),y,n) \
+
+PKG_EXTRA_CFLAGS:= \
+	$(patsubst CONFIG_%, -DCONFIG_%=1, $(patsubst %=m,%,$(filter %=m,$(PKG_EXTRA_KCONFIG)))) \
+	$(patsubst CONFIG_%, -DCONFIG_%=1, $(patsubst %=y,%,$(filter %=y,$(PKG_EXTRA_KCONFIG)))) \
+
+NOSTDINC_FLAGS = \
+	-I$(PKG_BUILD_DIR)/net/batman-adv \
+	-I$(STAGING_DIR)/usr/include/mac80211-backport \
+	-I$(STAGING_DIR)/usr/include/mac80211-backport/uapi \
+	-I$(STAGING_DIR)/usr/include/mac80211 \
+	-I$(STAGING_DIR)/usr/include/mac80211/uapi \
+	-I$(PKG_BUILD_DIR)/include/ \
+	-include backport/backport.h \
+	-include $(PKG_BUILD_DIR)/compat-hacks.h
+
+COMPAT_SOURCES = \
+	$(if $(CONFIG_KMOD_BATMAN_ADV_MCAST),../../compat-sources/net/core/skbuff.o,) \
+	$(if $(CONFIG_KMOD_BATMAN_ADV_MCAST),../../compat-sources/net/ipv4/igmp.o,) \
+	$(if $(CONFIG_KMOD_BATMAN_ADV_MCAST),../../compat-sources/net/ipv6/mcast_snoop.o,) \
 
-define Build/Prepare
-	$(call Build/Prepare/Default)
-	$(SED) '/#define _NET_BATMAN_ADV_MAIN_H_/a\#undef CONFIG_MODULE_STRIPPED' \
-		$(PKG_BUILD_DIR)/net/batman-adv/main.h
+define Build/Compile
+	+env "batman-adv-y=$(COMPAT_SOURCES)" \
+	$(MAKE) $(PKG_JOBS) -C "$(LINUX_DIR)" \
+		ARCH="$(LINUX_KARCH)" \
+		CROSS_COMPILE="$(TARGET_CROSS)" \
+		SUBDIRS="$(PKG_BUILD_DIR)/net/batman-adv" \
+		$(PKG_EXTRA_KCONFIG) \
+		EXTRA_CFLAGS="$(PKG_EXTRA_CFLAGS)" \
+		NOSTDINC_FLAGS="$(NOSTDINC_FLAGS)" \
+		modules
 endef
 
-define Build/Compile
-	$(MAKE) -C "$(PKG_BUILD_DIR)" $(MAKE_BATMAN_ADV_ARGS)
+define Build/Prepare
+	$(call Build/Prepare/Default)
+	$(CP) ./files/compat-hacks.h $(PKG_BUILD_DIR)/
 endef
 
 define Build/Clean
diff --git a/batman-adv/files/compat-hacks.h b/batman-adv/files/compat-hacks.h
new file mode 100644
index 0000000..32903b5
--- /dev/null
+++ b/batman-adv/files/compat-hacks.h
@@ -0,0 +1,189 @@
+/* Please avoid adding hacks here - instead add it to mac80211/backports.git */
+
+#undef CONFIG_MODULE_STRIPPED
+
+#include <linux/version.h>	/* LINUX_VERSION_CODE */
+#include <linux/types.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 1, 0)
+
+#define dev_get_iflink(_net_dev) ((_net_dev)->iflink)
+
+#endif /* < KERNEL_VERSION(4, 1, 0) */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 9, 0)
+
+#include <linux/netdevice.h>
+
+#define netdev_master_upper_dev_link(dev, upper_dev, upper_priv, upper_info) ({\
+	BUILD_BUG_ON(upper_priv != NULL); \
+	BUILD_BUG_ON(upper_info != NULL); \
+	netdev_set_master(dev, upper_dev); \
+})
+
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(4, 5, 0)
+
+#include <linux/netdevice.h>
+
+#define netdev_master_upper_dev_link(dev, upper_dev, upper_priv, upper_info) ({\
+	BUILD_BUG_ON(upper_priv != NULL); \
+	BUILD_BUG_ON(upper_info != NULL); \
+	netdev_master_upper_dev_link(dev, upper_dev); \
+})
+
+#endif /* < KERNEL_VERSION(4, 5, 0) */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 2, 0)
+
+struct sk_buff *skb_checksum_trimmed(struct sk_buff *skb,
+				     unsigned int transport_len,
+				     __sum16(*skb_chkf)(struct sk_buff *skb));
+
+int ip_mc_check_igmp(struct sk_buff *skb, struct sk_buff **skb_trimmed);
+
+int ipv6_mc_check_mld(struct sk_buff *skb, struct sk_buff **skb_trimmed);
+
+#endif /* < KERNEL_VERSION(4, 2, 0) */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0)
+
+#define IFF_NO_QUEUE	0; dev->tx_queue_len = 0
+
+#endif /* < KERNEL_VERSION(4, 3, 0) */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
+
+#include <linux/ethtool.h>
+
+#define ethtool_link_ksettings batadv_ethtool_link_ksettings
+
+struct batadv_ethtool_link_ksettings {
+	struct {
+		__u32	speed;
+		__u8	duplex;
+	} base;
+};
+
+#define __ethtool_get_link_ksettings(__dev, __link_settings) \
+	batadv_ethtool_get_link_ksettings(__dev, __link_settings)
+
+static inline int
+batadv_ethtool_get_link_ksettings(struct net_device *dev,
+				  struct ethtool_link_ksettings *link_ksettings)
+{
+	struct ethtool_cmd cmd;
+	int ret;
+
+	memset(&cmd, 0, sizeof(cmd));
+	ret = __ethtool_get_settings(dev, &cmd);
+
+	if (ret != 0)
+		return ret;
+
+	link_ksettings->base.duplex = cmd.duplex;
+	link_ksettings->base.speed = ethtool_cmd_speed(&cmd);
+
+	return 0;
+}
+
+#endif /* < KERNEL_VERSION(4, 6, 0) */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 7, 0)
+
+#define netif_trans_update batadv_netif_trans_update
+static inline void batadv_netif_trans_update(struct net_device *dev)
+{
+	dev->trans_start = jiffies;
+}
+
+#endif /* < KERNEL_VERSION(4, 7, 0) */
+
+
+#include_next <linux/netlink.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 7, 0)
+
+#include_next <net/netlink.h>
+
+static inline bool batadv_nla_need_padding_for_64bit(struct sk_buff *skb);
+
+static inline int batadv_nla_align_64bit(struct sk_buff *skb, int padattr)
+{
+	if (batadv_nla_need_padding_for_64bit(skb) &&
+	    !nla_reserve(skb, padattr, 0))
+		return -EMSGSIZE;
+
+	return 0;
+}
+
+static inline struct nlattr *batadv__nla_reserve_64bit(struct sk_buff *skb,
+						       int attrtype,
+						       int attrlen, int padattr)
+{
+	if (batadv_nla_need_padding_for_64bit(skb))
+		batadv_nla_align_64bit(skb, padattr);
+
+	return __nla_reserve(skb, attrtype, attrlen);
+}
+
+static inline void batadv__nla_put_64bit(struct sk_buff *skb, int attrtype,
+					 int attrlen, const void *data,
+					 int padattr)
+{
+	struct nlattr *nla;
+
+	nla = batadv__nla_reserve_64bit(skb, attrtype, attrlen, padattr);
+	memcpy(nla_data(nla), data, attrlen);
+}
+
+static inline bool batadv_nla_need_padding_for_64bit(struct sk_buff *skb)
+{
+#ifndef CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS
+	/* The nlattr header is 4 bytes in size, that's why we test
+	 * if the skb->data _is_ aligned.  A NOP attribute, plus
+	 * nlattr header for next attribute, will make nla_data()
+	 * 8-byte aligned.
+	 */
+	if (IS_ALIGNED((unsigned long)skb_tail_pointer(skb), 8))
+		return true;
+#endif
+	return false;
+}
+
+static inline int batadv_nla_total_size_64bit(int payload)
+{
+	return NLA_ALIGN(nla_attr_size(payload))
+#ifndef CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS
+		+ NLA_ALIGN(nla_attr_size(0))
+#endif
+		;
+}
+
+static inline int batadv_nla_put_64bit(struct sk_buff *skb, int attrtype,
+				       int attrlen, const void *data,
+				       int padattr)
+{
+	size_t len;
+
+	if (batadv_nla_need_padding_for_64bit(skb))
+		len = batadv_nla_total_size_64bit(attrlen);
+	else
+		len = nla_total_size(attrlen);
+	if (unlikely(skb_tailroom(skb) < len))
+		return -EMSGSIZE;
+
+	batadv__nla_put_64bit(skb, attrtype, attrlen, data, padattr);
+	return 0;
+}
+
+#define nla_put_u64_64bit(_skb, _attrtype, _value, _padattr) \
+	batadv_nla_put_u64_64bit(_skb, _attrtype, _value, _padattr)
+static inline int batadv_nla_put_u64_64bit(struct sk_buff *skb, int attrtype,
+					   u64 value, int padattr)
+{
+	return batadv_nla_put_64bit(skb, attrtype, sizeof(u64), &value,
+				    padattr);
+}
+
+#endif /* < KERNEL_VERSION(4, 7, 0) */
+
diff --git a/batman-adv/files/lib/netifd/proto/batadv.sh b/batman-adv/files/lib/netifd/proto/batadv.sh
index 01f567f..82fd4ad 100644
--- a/batman-adv/files/lib/netifd/proto/batadv.sh
+++ b/batman-adv/files/lib/netifd/proto/batadv.sh
@@ -6,6 +6,7 @@ init_proto "$@"
 
 proto_batadv_init_config() {
 	proto_config_add_string "mesh"
+	proto_config_add_string "routing_algo"
 	proto_config_add_string "mesh_no_rebroadcast"
 }
 
@@ -13,12 +14,14 @@ proto_batadv_setup() {
 	local config="$1"
 	local iface="$2"
 
-	local mesh mesh_no_rebroadcast
-	json_get_vars mesh mesh_no_rebroadcast
+	local mesh routing_algo mesh_no_rebroadcast
+	json_get_vars mesh routing_algo mesh_no_rebroadcast
+
+	[ -n "$routing_algo" ] || routing_algo="BATMAN_IV"
+	echo "$routing_algo" > "/sys/module/batman_adv/parameters/routing_algo"
 
 	echo "$mesh" > "/sys/class/net/$iface/batman_adv/mesh_iface"
 	[ -n "$mesh_no_rebroadcast" ] && echo "$mesh_no_rebroadcast" > "/sys/class/net/$iface/batman_adv/no_rebroadcast"
-
 	proto_init_update "$iface" 1
 	proto_send_update "$config"
 }
diff --git a/batman-adv/patches/0001-batman-adv-don-t-access-unregistered-net_device-obje.patch b/batman-adv/patches/0001-batman-adv-don-t-access-unregistered-net_device-obje.patch
deleted file mode 100644
index 75da6fb..0000000
--- a/batman-adv/patches/0001-batman-adv-don-t-access-unregistered-net_device-obje.patch
+++ /dev/null
@@ -1,46 +0,0 @@
-From 958aafba93c7e408237298c5b2c5d7c3e318402c Mon Sep 17 00:00:00 2001
-From: Antonio Quartulli <antonio@meshcoding.com>
-Date: Tue, 4 Aug 2015 22:26:19 +0200
-Subject: [PATCH 1/9] batman-adv: don't access unregistered net_device object
-
-In batadv_hardif_disable_interface() there is a call to
-batadv_softif_destroy_sysfs() which in turns invokes
-unregister_netdevice() on the soft_iface.
-After this point we cannot rely on the soft_iface object
-anymore because it might get free'd by the netdev periodic
-routine at any time.
-
-For this reason the netdev_upper_dev_unlink(.., soft_iface) call
-is moved before the invocation of batadv_softif_destroy_sysfs() so
-that we can be sure that the soft_iface object is still valid.
-
-Signed-off-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/hard-interface.c | 3 ++-
- 1 file changed, 2 insertions(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/hard-interface.c b/net/batman-adv/hard-interface.c
-index f4a15d2..0565b20 100644
---- a/net/batman-adv/hard-interface.c
-+++ b/net/batman-adv/hard-interface.c
-@@ -528,6 +528,8 @@ void batadv_hardif_disable_interface(struct batadv_hard_iface *hard_iface,
- 	batadv_purge_outstanding_packets(bat_priv, hard_iface);
- 	dev_put(hard_iface->soft_iface);
- 
-+	netdev_upper_dev_unlink(hard_iface->net_dev, hard_iface->soft_iface);
-+
- 	/* nobody uses this interface anymore */
- 	if (!bat_priv->num_ifaces) {
- 		batadv_gw_check_client_stop(bat_priv);
-@@ -536,7 +538,6 @@ void batadv_hardif_disable_interface(struct batadv_hard_iface *hard_iface,
- 			batadv_softif_destroy_sysfs(hard_iface->soft_iface);
- 	}
- 
--	netdev_upper_dev_unlink(hard_iface->net_dev, hard_iface->soft_iface);
- 	hard_iface->soft_iface = NULL;
- 	batadv_hardif_free_ref(hard_iface);
- 
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0002-batman-adv-Add-lower-layer-needed_-head-tail-room-to.patch b/batman-adv/patches/0002-batman-adv-Add-lower-layer-needed_-head-tail-room-to.patch
deleted file mode 100644
index 681c4b2..0000000
--- a/batman-adv/patches/0002-batman-adv-Add-lower-layer-needed_-head-tail-room-to.patch
+++ /dev/null
@@ -1,101 +0,0 @@
-From e2b4301f4e2d3695ed2024880d2295223cb2f857 Mon Sep 17 00:00:00 2001
-From: Sven Eckelmann <sven@narfation.org>
-Date: Fri, 7 Aug 2015 19:28:42 +0200
-Subject: [PATCH 2/9] batman-adv: Add lower layer needed_(head|tail)room to own
- ones
-
-The maximum of hard_header_len and maximum of all needed_(head|tail)room of
-all slave interfaces of a batman-adv device must be used to define the
-batman-adv device needed_(head|tail)room. This is required to avoid too
-small buffer problems when these slave devices try to send the encapsulated
-packet in a tx path without the possibility to resize the skbuff.
-
-Signed-off-by: Sven Eckelmann <sven@narfation.org>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/hard-interface.c | 41 +++++++++++++++++++++++++++++++++++++++++
- net/batman-adv/soft-interface.c |  2 --
- 2 files changed, 41 insertions(+), 2 deletions(-)
-
-diff --git a/net/batman-adv/hard-interface.c b/net/batman-adv/hard-interface.c
-index 0565b20..f11345e 100644
---- a/net/batman-adv/hard-interface.c
-+++ b/net/batman-adv/hard-interface.c
-@@ -252,6 +252,44 @@ static void batadv_check_known_mac_addr(const struct net_device *net_dev)
- 	rcu_read_unlock();
- }
- 
-+/**
-+ * batadv_hardif_recalc_extra_skbroom() - Recalculate skbuff extra head/tailroom
-+ * @soft_iface: netdev struct of the mesh interface
-+ */
-+static void batadv_hardif_recalc_extra_skbroom(struct net_device *soft_iface)
-+{
-+	const struct batadv_hard_iface *hard_iface;
-+	unsigned short lower_header_len = ETH_HLEN;
-+	unsigned short lower_headroom = 0;
-+	unsigned short lower_tailroom = 0;
-+	unsigned short needed_headroom;
-+
-+	rcu_read_lock();
-+	list_for_each_entry_rcu(hard_iface, &batadv_hardif_list, list) {
-+		if (hard_iface->if_status == BATADV_IF_NOT_IN_USE)
-+			continue;
-+
-+		if (hard_iface->soft_iface != soft_iface)
-+			continue;
-+
-+		lower_header_len = max_t(unsigned short, lower_header_len,
-+					 hard_iface->net_dev->hard_header_len);
-+
-+		lower_headroom = max_t(unsigned short, lower_headroom,
-+				       hard_iface->net_dev->needed_headroom);
-+
-+		lower_tailroom = max_t(unsigned short, lower_tailroom,
-+				       hard_iface->net_dev->needed_tailroom);
-+	}
-+	rcu_read_unlock();
-+
-+	needed_headroom = lower_headroom + (lower_header_len - ETH_HLEN);
-+	needed_headroom += batadv_max_header_len();
-+
-+	soft_iface->needed_headroom = needed_headroom;
-+	soft_iface->needed_tailroom = lower_tailroom;
-+}
-+
- int batadv_hardif_min_mtu(struct net_device *soft_iface)
- {
- 	struct batadv_priv *bat_priv = netdev_priv(soft_iface);
-@@ -474,6 +512,8 @@ int batadv_hardif_enable_interface(struct batadv_hard_iface *hard_iface,
- 			   "Not using interface %s (retrying later): interface not active\n",
- 			   hard_iface->net_dev->name);
- 
-+	batadv_hardif_recalc_extra_skbroom(soft_iface);
-+
- 	/* begin scheduling originator messages on that interface */
- 	batadv_schedule_bat_ogm(hard_iface);
- 
-@@ -529,6 +569,7 @@ void batadv_hardif_disable_interface(struct batadv_hard_iface *hard_iface,
- 	dev_put(hard_iface->soft_iface);
- 
- 	netdev_upper_dev_unlink(hard_iface->net_dev, hard_iface->soft_iface);
-+	batadv_hardif_recalc_extra_skbroom(hard_iface->soft_iface);
- 
- 	/* nobody uses this interface anymore */
- 	if (!bat_priv->num_ifaces) {
-diff --git a/net/batman-adv/soft-interface.c b/net/batman-adv/soft-interface.c
-index 51cda3a..10f6448 100644
---- a/net/batman-adv/soft-interface.c
-+++ b/net/batman-adv/soft-interface.c
-@@ -947,8 +947,6 @@ static void batadv_softif_init_early(struct net_device *dev)
- 	 * have not been initialized yet
- 	 */
- 	dev->mtu = ETH_DATA_LEN;
--	/* reserve more space in the skbuff for our header */
--	dev->hard_header_len = batadv_max_header_len();
- 
- 	/* generate random address */
- 	eth_hw_addr_random(dev);
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0003-batman-adv-Fix-memory-leak-on-tt-add-with-invalid-vl.patch b/batman-adv/patches/0003-batman-adv-Fix-memory-leak-on-tt-add-with-invalid-vl.patch
deleted file mode 100644
index 8fc5f64..0000000
--- a/batman-adv/patches/0003-batman-adv-Fix-memory-leak-on-tt-add-with-invalid-vl.patch
+++ /dev/null
@@ -1,43 +0,0 @@
-From dba67bc80fbfe6a28fc3c1141cca1c556ab7e499 Mon Sep 17 00:00:00 2001
-From: Sven Eckelmann <sven@narfation.org>
-Date: Tue, 18 Aug 2015 13:37:01 +0200
-Subject: [PATCH 3/9] batman-adv: Fix memory leak on tt add with invalid vlan
-
-The object tt_local is allocated with kmalloc and not initialized when the
-function batadv_tt_local_add checks for the vlan. But this function can
-only cleanup the object when the (not yet initialized) reference counter of
-the object is 1. This is unlikely and thus the object would leak when the
-vlan could not be found.
-
-Instead the uninitialized object tt_local has to be freed manually and the
-pointer has to set to NULL to avoid calling the function which would try to
-decrement the reference counter of the not existing object.
-
-CID: 1316518
-Fixes: 354136bcc3c4 ("batman-adv: fix kernel crash due to missing NULL checks")
-Signed-off-by: Sven Eckelmann <sven@narfation.org>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/translation-table.c | 5 ++++-
- 1 file changed, 4 insertions(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
-index 7986ec5..39283ff 100644
---- a/net/batman-adv/translation-table.c
-+++ b/net/batman-adv/translation-table.c
-@@ -595,8 +595,11 @@ bool batadv_tt_local_add(struct net_device *soft_iface, const uint8_t *addr,
- 	/* increase the refcounter of the related vlan */
- 	vlan = batadv_softif_vlan_get(bat_priv, vid);
- 	if (WARN(!vlan, "adding TT local entry %pM to non-existent VLAN %d",
--		 addr, BATADV_PRINT_VID(vid)))
-+		 addr, BATADV_PRINT_VID(vid))) {
-+		kfree(tt_local);
-+		tt_local = NULL;
- 		goto out;
-+	}
- 
- 	batadv_dbg(BATADV_DBG_TT, bat_priv,
- 		   "Creating new local tt entry: %pM (vid: %d, ttvn: %d)\n",
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0004-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch b/batman-adv/patches/0004-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
deleted file mode 100644
index afe66a6..0000000
--- a/batman-adv/patches/0004-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From af3558688698479a56034f0fcbca164be2052aa8 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@c0d3.blue>
-Date: Fri, 14 Aug 2015 17:23:48 +0200
-Subject: [PATCH 4/9] batman-adv: Remove unnecessary braces for test_bit() in
- DAT
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Fixes: de466678 ("batman-adv: Fix broken DAT capability check")
-Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/distributed-arp-table.c | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/distributed-arp-table.c b/net/batman-adv/distributed-arp-table.c
-index 1caf7d2..63243a3 100644
---- a/net/batman-adv/distributed-arp-table.c
-+++ b/net/batman-adv/distributed-arp-table.c
-@@ -453,7 +453,7 @@ static bool batadv_is_orig_node_eligible(struct batadv_dat_candidate *res,
- 	int j;
- 
- 	/* check if orig node candidate is running DAT */
--	if (!(test_bit(BATADV_ORIG_CAPA_HAS_DAT, &candidate->capabilities)))
-+	if (!test_bit(BATADV_ORIG_CAPA_HAS_DAT, &candidate->capabilities))
- 		goto out;
- 
- 	/* Check if this node has already been selected... */
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0005-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch b/batman-adv/patches/0005-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
deleted file mode 100644
index eecbdcd..0000000
--- a/batman-adv/patches/0005-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From 5abaf07b4c24ab2d7bd9b0c0de946b1ee5e946ff Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@c0d3.blue>
-Date: Fri, 14 Aug 2015 17:23:49 +0200
-Subject: [PATCH 5/9] batman-adv: Remove unnecessary braces for test_bit() in
- NC
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Fixes: dfb27e75 ("batman-adv: Fix broken NC capability check")
-Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/network-coding.c | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/network-coding.c b/net/batman-adv/network-coding.c
-index 55a0b28..1a1f7e6 100644
---- a/net/batman-adv/network-coding.c
-+++ b/net/batman-adv/network-coding.c
-@@ -894,7 +894,7 @@ void batadv_nc_update_nc_node(struct batadv_priv *bat_priv,
- 		goto out;
- 
- 	/* check if orig node is network coding enabled */
--	if (!(test_bit(BATADV_ORIG_CAPA_HAS_NC, &orig_node->capabilities)))
-+	if (!test_bit(BATADV_ORIG_CAPA_HAS_NC, &orig_node->capabilities))
- 		goto out;
- 
- 	/* accept ogms from 'good' neighbors and single hop neighbors */
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0006-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch b/batman-adv/patches/0006-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
deleted file mode 100644
index a4b4292..0000000
--- a/batman-adv/patches/0006-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
+++ /dev/null
@@ -1,41 +0,0 @@
-From d126204d0471e0972142697f36364443a0bbc9cc Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@c0d3.blue>
-Date: Fri, 14 Aug 2015 17:23:50 +0200
-Subject: [PATCH 6/9] batman-adv: Remove unnecessary braces for test_bit() in
- MCAST
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Fixes: 1798ad3f ("batman-adv: Fix broken MCAST capability check")
-Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/multicast.c | 4 ++--
- 1 file changed, 2 insertions(+), 2 deletions(-)
-
-diff --git a/net/batman-adv/multicast.c b/net/batman-adv/multicast.c
-index 8bdd69f..4541f08 100644
---- a/net/batman-adv/multicast.c
-+++ b/net/batman-adv/multicast.c
-@@ -740,7 +740,7 @@ static void batadv_mcast_tvlv_ogm_handler_v1(struct batadv_priv *bat_priv,
- 	 * is a completely new orig_node no need to decrease the counter.
- 	 */
- 	if (orig_mcast_enabled &&
--	    !(test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities))) {
-+	    !test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities)) {
- 		if (orig_initialized)
- 			atomic_dec(&bat_priv->mcast.num_disabled);
- 		set_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities);
-@@ -798,7 +798,7 @@ void batadv_mcast_purge_orig(struct batadv_orig_node *orig)
- 
- 	spin_lock_bh(&orig->mcast_handler_lock);
- 
--	if (!(test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities)) &&
-+	if (!test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities) &&
- 	    test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capa_initialized))
- 		atomic_dec(&bat_priv->mcast.num_disabled);
- 
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0007-batman-adv-fix-speedy-join-for-DAT-cache-replies.patch b/batman-adv/patches/0007-batman-adv-fix-speedy-join-for-DAT-cache-replies.patch
deleted file mode 100644
index d88508a..0000000
--- a/batman-adv/patches/0007-batman-adv-fix-speedy-join-for-DAT-cache-replies.patch
+++ /dev/null
@@ -1,58 +0,0 @@
-From 2decb5f1fef1484f1b7319aaf2f36b5492d8d943 Mon Sep 17 00:00:00 2001
-From: Simon Wunderlich <sw@simonwunderlich.de>
-Date: Wed, 2 Sep 2015 20:09:54 +0200
-Subject: [PATCH 7/9] batman-adv: fix speedy join for DAT cache replies
-
-DAT Cache replies are answered on behalf of other clients which are not
-connected to the answering originator. Therefore, we shouldn't add these
-clients to the answering originators TT table through speed join to
-avoid bogus entries.
-
-Reported-by: Alessandro Bolletta <alessandro@mediaspot.net>
-Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
-Acked-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/routing.c | 19 +++++++++++++++----
- 1 file changed, 15 insertions(+), 4 deletions(-)
-
-diff --git a/net/batman-adv/routing.c b/net/batman-adv/routing.c
-index c360c0c..96b5daa 100644
---- a/net/batman-adv/routing.c
-+++ b/net/batman-adv/routing.c
-@@ -836,6 +836,7 @@ int batadv_recv_unicast_packet(struct sk_buff *skb,
- 	uint8_t *orig_addr;
- 	struct batadv_orig_node *orig_node = NULL;
- 	int check, hdr_size = sizeof(*unicast_packet);
-+	enum batadv_subtype subtype;
- 	bool is4addr;
- 
- 	unicast_packet = (struct batadv_unicast_packet *)skb->data;
-@@ -863,10 +864,20 @@ int batadv_recv_unicast_packet(struct sk_buff *skb,
- 	/* packet for me */
- 	if (batadv_is_my_mac(bat_priv, unicast_packet->dest)) {
- 		if (is4addr) {
--			batadv_dat_inc_counter(bat_priv,
--					       unicast_4addr_packet->subtype);
--			orig_addr = unicast_4addr_packet->src;
--			orig_node = batadv_orig_hash_find(bat_priv, orig_addr);
-+			subtype = unicast_4addr_packet->subtype;
-+			batadv_dat_inc_counter(bat_priv, subtype);
-+
-+			/* Only payload data should be considered for speedy
-+			 * join. For example, DAT also uses unicast 4addr
-+			 * types, but those packets should not be considered
-+			 * for speedy join, since the clients do not actually
-+			 * reside at the sending originator.
-+			 */
-+			if (subtype == BATADV_P_DATA) {
-+				orig_addr = unicast_4addr_packet->src;
-+				orig_node = batadv_orig_hash_find(bat_priv,
-+								  orig_addr);
-+			}
- 		}
- 
- 		if (batadv_dat_snoop_incoming_arp_request(bat_priv, skb,
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0008-batman-adv-avoid-keeping-false-temporary-entry.patch b/batman-adv/patches/0008-batman-adv-avoid-keeping-false-temporary-entry.patch
deleted file mode 100644
index 0e7dbab..0000000
--- a/batman-adv/patches/0008-batman-adv-avoid-keeping-false-temporary-entry.patch
+++ /dev/null
@@ -1,51 +0,0 @@
-From 4a73d7438dfb60c7ac82758875292bc14f363b45 Mon Sep 17 00:00:00 2001
-From: Simon Wunderlich <sw@simonwunderlich.de>
-Date: Wed, 2 Sep 2015 20:09:55 +0200
-Subject: [PATCH 8/9] batman-adv: avoid keeping false temporary entry
-
-In the case when a temporary entry is added first and a proper tt entry
-is added after that, the temporary tt entry is kept in the orig list.
-However the temporary flag is removed at this point, and therefore the
-purge function can not find this temporary entry anymore.
-
-Therefore, remove the previous temp entry before adding the new proper
-one.
-
-This case can happen if a client behind a given originator moves before
-the TT announcement is sent out. Other than that, this case can also be
-created by bogus or malicious payload frames for VLANs which are not
-existent on the sending originator.
-
-Reported-by: Alessandro Bolletta <alessandro@mediaspot.net>
-Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
-Acked-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/translation-table.c | 10 ++++++++--
- 1 file changed, 8 insertions(+), 2 deletions(-)
-
-diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
-index 39283ff..9ac1a46 100644
---- a/net/batman-adv/translation-table.c
-+++ b/net/batman-adv/translation-table.c
-@@ -1419,9 +1419,15 @@ static bool batadv_tt_global_add(struct batadv_priv *bat_priv,
- 		}
- 
- 		/* if the client was temporary added before receiving the first
--		 * OGM announcing it, we have to clear the TEMP flag
-+		 * OGM announcing it, we have to clear the TEMP flag. Also,
-+		 * remove the previous temporary orig node and re-add it
-+		 * if required. If the orig entry changed, the new one which
-+		 * is a non-temporary entry is preferred.
- 		 */
--		common->flags &= ~BATADV_TT_CLIENT_TEMP;
-+		if (common->flags & BATADV_TT_CLIENT_TEMP) {
-+			batadv_tt_global_del_orig_list(tt_global_entry);
-+			common->flags &= ~BATADV_TT_CLIENT_TEMP;
-+		}
- 
- 		/* the change can carry possible "attribute" flags like the
- 		 * TT_CLIENT_WIFI, therefore they have to be copied in the
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0009-batman-adv-detect-local-excess-vlans-in-TT-request.patch b/batman-adv/patches/0009-batman-adv-detect-local-excess-vlans-in-TT-request.patch
deleted file mode 100644
index 66e0dcf..0000000
--- a/batman-adv/patches/0009-batman-adv-detect-local-excess-vlans-in-TT-request.patch
+++ /dev/null
@@ -1,55 +0,0 @@
-From 2dd1d9f06ac1208b1921aa90d479c3940bc70b4f Mon Sep 17 00:00:00 2001
-From: Simon Wunderlich <sw@simonwunderlich.de>
-Date: Wed, 2 Sep 2015 20:09:56 +0200
-Subject: [PATCH 9/9] batman-adv: detect local excess vlans in TT request
-
-If the local representation of the global TT table of one originator has
-more VLAN entries than the respective TT update, there is some
-inconsistency present. By detecting and reporting this inconsistency,
-the global table gets updated and the excess VLAN will get removed in
-the process.
-
-Reported-by: Alessandro Bolletta <alessandro@mediaspot.net>
-Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
-Acked-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/translation-table.c | 14 +++++++++++++-
- 1 file changed, 13 insertions(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
-index 9ac1a46..7e4657e 100644
---- a/net/batman-adv/translation-table.c
-+++ b/net/batman-adv/translation-table.c
-@@ -2394,8 +2394,8 @@ static bool batadv_tt_global_check_crc(struct batadv_orig_node *orig_node,
- {
- 	struct batadv_tvlv_tt_vlan_data *tt_vlan_tmp;
- 	struct batadv_orig_node_vlan *vlan;
-+	int i, orig_num_vlan;
- 	uint32_t crc;
--	int i;
- 
- 	/* check if each received CRC matches the locally stored one */
- 	for (i = 0; i < num_vlan; i++) {
-@@ -2421,6 +2421,18 @@ static bool batadv_tt_global_check_crc(struct batadv_orig_node *orig_node,
- 			return false;
- 	}
- 
-+	/* check if any excess VLANs exist locally for the originator
-+	 * which are not mentioned in the TVLV from the originator.
-+	 */
-+	rcu_read_lock();
-+	orig_num_vlan = 0;
-+	list_for_each_entry_rcu(vlan, &orig_node->vlan_list, list)
-+		orig_num_vlan++;
-+	rcu_read_unlock();
-+
-+	if (orig_num_vlan > num_vlan)
-+		return false;
-+
- 	return true;
- }
- 
--- 
-2.5.0
-
diff --git a/batman-adv/patches/1001-batman-adv-decrease-maximum-fragment-size.patch b/batman-adv/patches/1001-batman-adv-decrease-maximum-fragment-size.patch
new file mode 100644
index 0000000..9d1a482
--- /dev/null
+++ b/batman-adv/patches/1001-batman-adv-decrease-maximum-fragment-size.patch
@@ -0,0 +1,20 @@
+From: Matthias Schiffer <mschiffer@universe-factory.net>
+Date: Thu, 6 Aug 2015 22:27:01 +0200
+Subject: [PATCH] batman-adv: decrease maximum fragment size
+---
+ net/batman-adv/main.h | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/net/batman-adv/main.h b/net/batman-adv/main.h
+index 06a8608..6306aa1 100644
+--- a/net/batman-adv/main.h
++++ b/net/batman-adv/main.h
+@@ -167,7 +167,7 @@ enum batadv_uev_type {
+ /* Maximum number of fragments for one packet */
+ #define BATADV_FRAG_MAX_FRAGMENTS 16
+ /* Maxumim size of each fragment */
+-#define BATADV_FRAG_MAX_FRAG_SIZE 1400
++#define BATADV_FRAG_MAX_FRAG_SIZE 1280
+ /* Time to keep fragments while waiting for rest of the fragments */
+ #define BATADV_FRAG_TIMEOUT 10000
+ 
diff --git a/batman-adv/patches/1001-batman-adv-introduce-no_rebroadcast-option.patch b/batman-adv/patches/1001-batman-adv-introduce-no_rebroadcast-option.patch
deleted file mode 100644
index f461ddc..0000000
--- a/batman-adv/patches/1001-batman-adv-introduce-no_rebroadcast-option.patch
+++ /dev/null
@@ -1,172 +0,0 @@
-From a20c87779270f509227feecc4487e36a7d850c0f Mon Sep 17 00:00:00 2001
-Message-Id: <a20c87779270f509227feecc4487e36a7d850c0f.1438892883.git.mschiffer@universe-factory.net>
-From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@web.de>
-Date: Tue, 24 Sep 2013 04:36:27 +0200
-Subject: [PATCH 1/2] batman-adv: introduce 'no_rebroadcast' option
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-This patch introduces a new sysfs option named "no_rebroadcast" on
-a per hard interface basis. It allows manually enabling a split-horizon
-like behaviour for the layer 2 multicast payload frames, in that
-incoming multicast payload frames on such a hard interface are only
-being rebroadcasted on all interfaces except the incoming one instead
-of being rebroadcasted on all interfaces.
-
-Such an option should only be enabled if you are certain that these
-rebroadcasts are unnecessary. This is usually the case for instance
-for point-to-point wifi longshots or wired links.
-
-This option can especially safe a significant amount of upload overhead
-if the neighbourhood on a link is rather large, for instance in some
-transitive, symmetric VPN configurations.
-
-Using this option wrongly will break your mesh network, use this option
-wisely and at your own risk!
-
-Signed-off-by: Linus Lüssing <linus.luessing@web.de>
----
- .../ABI/testing/sysfs-class-net-batman-adv         | 10 ++++
- net/batman-adv/hard-interface.c                    |  2 +
- net/batman-adv/send.c                              |  4 ++
- net/batman-adv/sysfs.c                             | 59 ++++++++++++++++++++++
- net/batman-adv/types.h                             |  1 +
- 5 files changed, 76 insertions(+)
-
---- a/Documentation/ABI/testing/sysfs-class-net-batman-adv
-+++ b/Documentation/ABI/testing/sysfs-class-net-batman-adv
-@@ -13,3 +13,13 @@ Description:
-                 displays the batman mesh interface this <iface>
-                 currently is associated with.
- 
-+What:           /sys/class/net/<iface>/batman-adv/no_rebroadcast
-+Date:           Sep 2013
-+Contact:        Linus Lüssing <linus.luessing@web.de>
-+Description:
-+                With this option set incoming multicast payload frames on
-+                <iface> are not being rebroadcasted on <iface> again. This
-+                option should be set on links which are known to be transitive
-+                and symmetric only, for instance point-to-point wifi longshots
-+                or wired links. Using this option wrongly is going to
-+                break your mesh network, use at your own risk!
---- a/net/batman-adv/hard-interface.c
-+++ b/net/batman-adv/hard-interface.c
-@@ -639,6 +639,8 @@ batadv_hardif_add_interface(struct net_d
- 	/* extra reference for return */
- 	atomic_set(&hard_iface->refcount, 2);
- 
-+	atomic_set(&hard_iface->no_rebroadcast, 0);
-+
- 	batadv_check_known_mac_addr(hard_iface->net_dev);
- 	list_add_tail_rcu(&hard_iface->list, &batadv_hardif_list);
- 
---- a/net/batman-adv/send.c
-+++ b/net/batman-adv/send.c
-@@ -531,6 +531,10 @@ static void batadv_send_outstanding_bcas
- 		if (forw_packet->num_packets >= hard_iface->num_bcasts)
- 			continue;
- 
-+		if (atomic_read(&hard_iface->no_rebroadcast) &&
-+		    forw_packet->skb->dev == hard_iface->net_dev)
-+			continue;
-+
- 		/* send a copy of the saved skb */
- 		skb1 = skb_clone(forw_packet->skb, GFP_ATOMIC);
- 		if (skb1)
---- a/net/batman-adv/sysfs.c
-+++ b/net/batman-adv/sysfs.c
-@@ -129,6 +129,17 @@ struct batadv_attribute batadv_attr_vlan
- 	.store  = _store,				\
- }
- 
-+/* Use this, if you have customized show and store functions
-+ * for hard interface attrs
-+ */
-+#define BATADV_ATTR_HIF(_name, _mode, _show, _store)	\
-+struct batadv_attribute batadv_attr_hif_##_name = {	\
-+	.attr = {.name = __stringify(_name),		\
-+		 .mode = _mode },			\
-+	.show   = _show,				\
-+	.store  = _store,				\
-+};
-+
- /* Use this, if you have customized show and store functions */
- #define BATADV_ATTR(_name, _mode, _show, _store)	\
- struct batadv_attribute batadv_attr_##_name = {		\
-@@ -239,6 +250,52 @@ ssize_t batadv_show_vlan_##_name(struct
- 	static BATADV_ATTR_VLAN(_name, _mode, batadv_show_vlan_##_name,	\
- 				batadv_store_vlan_##_name)
- 
-+#define BATADV_ATTR_HIF_STORE_BOOL(_name, _post_func)			\
-+ssize_t batadv_store_hif_##_name(struct kobject *kobj,			\
-+				 struct attribute *attr, char *buff,	\
-+				 size_t count)				\
-+{									\
-+	struct net_device *net_dev = batadv_kobj_to_netdev(kobj);	\
-+	struct batadv_hard_iface *hard_iface;				\
-+	size_t res;							\
-+									\
-+	hard_iface = batadv_hardif_get_by_netdev(net_dev);		\
-+	if (!hard_iface)						\
-+		return 0;						\
-+									\
-+	res = __batadv_store_bool_attr(buff, count, _post_func,		\
-+					      attr, &hard_iface->_name,	\
-+					      hard_iface->soft_iface);	\
-+	batadv_hardif_free_ref(hard_iface);				\
-+	return res;							\
-+}
-+
-+#define BATADV_ATTR_HIF_SHOW_BOOL(_name)				\
-+ssize_t batadv_show_hif_##_name(struct kobject *kobj,			\
-+				struct attribute *attr, char *buff)	\
-+{									\
-+	struct net_device *net_dev = batadv_kobj_to_netdev(kobj);	\
-+	struct batadv_hard_iface *hard_iface;				\
-+	size_t res;							\
-+									\
-+	hard_iface = batadv_hardif_get_by_netdev(net_dev);		\
-+	if (!hard_iface)						\
-+		return 0;						\
-+									\
-+	res = sprintf(buff, "%s\n",					\
-+		      atomic_read(&hard_iface->_name) == 0 ?		\
-+				"disabled" : "enabled");		\
-+	batadv_hardif_free_ref(hard_iface);				\
-+	return res;							\
-+}
-+
-+/* Use this, if you are going to turn a [name] in the vlan struct on or off */
-+#define BATADV_ATTR_HIF_BOOL(_name, _mode, _post_func)			\
-+	static BATADV_ATTR_HIF_STORE_BOOL(_name, _post_func)		\
-+	static BATADV_ATTR_HIF_SHOW_BOOL(_name)				\
-+	static BATADV_ATTR_HIF(_name, _mode, batadv_show_hif_##_name,	\
-+			       batadv_store_hif_##_name)
-+
- static int batadv_store_bool_attr(char *buff, size_t count,
- 				  struct net_device *net_dev,
- 				  const char *attr_name, atomic_t *attr)
-@@ -863,10 +920,12 @@ static ssize_t batadv_show_iface_status(
- static BATADV_ATTR(mesh_iface, S_IRUGO | S_IWUSR, batadv_show_mesh_iface,
- 		   batadv_store_mesh_iface);
- static BATADV_ATTR(iface_status, S_IRUGO, batadv_show_iface_status, NULL);
-+BATADV_ATTR_HIF_BOOL(no_rebroadcast, S_IRUGO | S_IWUSR, NULL);
- 
- static struct batadv_attribute *batadv_batman_attrs[] = {
- 	&batadv_attr_mesh_iface,
- 	&batadv_attr_iface_status,
-+	&batadv_attr_hif_no_rebroadcast,
- 	NULL,
- };
- 
---- a/net/batman-adv/types.h
-+++ b/net/batman-adv/types.h
-@@ -115,6 +115,7 @@ struct batadv_hard_iface {
- 	struct batadv_hard_iface_bat_iv bat_iv;
- 	struct work_struct cleanup_work;
- 	struct dentry *debug_dir;
-+	atomic_t no_rebroadcast;
- };
- 
- /**
diff --git a/batman-adv/patches/1002-batman-adv-decrease-maximum-fragment-size.patch b/batman-adv/patches/1002-batman-adv-decrease-maximum-fragment-size.patch
deleted file mode 100644
index 16cb023..0000000
--- a/batman-adv/patches/1002-batman-adv-decrease-maximum-fragment-size.patch
+++ /dev/null
@@ -1,23 +0,0 @@
-From 02c861b6aa334dff1ce8031ffc328924c78beec1 Mon Sep 17 00:00:00 2001
-Message-Id: <02c861b6aa334dff1ce8031ffc328924c78beec1.1438892883.git.mschiffer@universe-factory.net>
-In-Reply-To: <a20c87779270f509227feecc4487e36a7d850c0f.1438892883.git.mschiffer@universe-factory.net>
-References: <a20c87779270f509227feecc4487e36a7d850c0f.1438892883.git.mschiffer@universe-factory.net>
-From: Matthias Schiffer <mschiffer@universe-factory.net>
-Date: Thu, 6 Aug 2015 22:27:01 +0200
-Subject: [PATCH 2/2] batman-adv: decrease maximum fragment size
-
----
- net/batman-adv/main.h | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
---- a/net/batman-adv/main.h
-+++ b/net/batman-adv/main.h
-@@ -148,7 +148,7 @@ enum batadv_uev_type {
- /* Maximum number of fragments for one packet */
- #define BATADV_FRAG_MAX_FRAGMENTS 16
- /* Maxumim size of each fragment */
--#define BATADV_FRAG_MAX_FRAG_SIZE 1400
-+#define BATADV_FRAG_MAX_FRAG_SIZE 1280
- /* Time to keep fragments while waiting for rest of the fragments */
- #define BATADV_FRAG_TIMEOUT 10000
- 
diff --git a/batman-adv/patches/1002-batman-adv-introduce-no_rebroadcast-option.patch b/batman-adv/patches/1002-batman-adv-introduce-no_rebroadcast-option.patch
new file mode 100644
index 0000000..c364f71
--- /dev/null
+++ b/batman-adv/patches/1002-batman-adv-introduce-no_rebroadcast-option.patch
@@ -0,0 +1,190 @@
+From: Linus Lüssing <linus.luessing@web.de>
+Date: Tue, 24 Sep 2013 04:36:27 +0200
+Subject: [PATCH] batman-adv: introduce 'no_rebroadcast' option
+
+This patch introduces a new sysfs option named "no_rebroadcast" on
+a per hard interface basis. It allows manually enabling a split-horizon
+like behaviour for the layer 2 multicast payload frames, in that
+incoming multicast payload frames on such a hard interface are only
+being rebroadcasted on all interfaces except the incoming one instead
+of being rebroadcasted on all interfaces.
+
+Such an option should only be enabled if you are certain that these
+rebroadcasts are unnecessary. This is usually the case for instance
+for point-to-point wifi longshots or wired links.
+
+This option can especially safe a significant amount of upload overhead
+if the neighbourhood on a link is rather large, for instance in some
+transitive, symmetric VPN configurations.
+
+Using this option wrongly will break your mesh network, use this option
+wisely and at your own risk!
+
+Signed-off-by: Linus Lüssing <linus.luessing@web.de>
+---
+ .../ABI/testing/sysfs-class-net-batman-adv         | 11 ++++
+ net/batman-adv/hard-interface.c                    |  2 +
+ net/batman-adv/send.c                              |  5 ++
+ net/batman-adv/sysfs.c                             | 59 ++++++++++++++++++++++
+ net/batman-adv/types.h                             |  1 +
+ 5 files changed, 78 insertions(+)
+
+diff --git a/Documentation/ABI/testing/sysfs-class-net-batman-adv b/Documentation/ABI/testing/sysfs-class-net-batman-adv
+index 8981068..ac04928 100644
+--- a/Documentation/ABI/testing/sysfs-class-net-batman-adv
++++ b/Documentation/ABI/testing/sysfs-class-net-batman-adv
+@@ -20,6 +20,17 @@ Description:
+                 displays the batman mesh interface this <iface>
+                 currently is associated with.
+ 
++What:           /sys/class/net/<iface>/batman-adv/no_rebroadcast
++Date:           Sep 2013
++Contact:        Linus Lüssing <linus.luessing@web.de>
++Description:
++                With this option set incoming multicast payload frames on
++                <iface> are not being rebroadcasted on <iface> again. This
++                option should be set on links which are known to be transitive
++                and symmetric only, for instance point-to-point wifi longshots
++                or wired links. Using this option wrongly is going to
++                break your mesh network, use at your own risk!
++
+ What:           /sys/class/net/<iface>/batman-adv/throughput_override
+ Date:           Feb 2014
+ Contact:        Antonio Quartulli <a@unstable.cc>
+diff --git a/net/batman-adv/hard-interface.c b/net/batman-adv/hard-interface.c
+index 1f90808..1ad9013 100644
+--- a/net/batman-adv/hard-interface.c
++++ b/net/batman-adv/hard-interface.c
+@@ -691,6 +691,8 @@ batadv_hardif_add_interface(struct net_device *net_dev)
+ 	kref_init(&hard_iface->refcount);
+ 	kref_get(&hard_iface->refcount);
+ 
++	atomic_set(&hard_iface->no_rebroadcast, 0);
++
+ 	batadv_check_known_mac_addr(hard_iface->net_dev);
+ 	list_add_tail_rcu(&hard_iface->list, &batadv_hardif_list);
+ 
+diff --git a/net/batman-adv/send.c b/net/batman-adv/send.c
+index 6191159..7a9e5ef 100644
+--- a/net/batman-adv/send.c
++++ b/net/batman-adv/send.c
+@@ -572,11 +572,16 @@ static void batadv_send_outstanding_bcast_packet(struct work_struct *work)
+ 		if (!kref_get_unless_zero(&hard_iface->refcount))
+ 			continue;
+ 
++		if (atomic_read(&hard_iface->no_rebroadcast) &&
++		    forw_packet->skb->dev == hard_iface->net_dev)
++			goto put_hardif;
++
+ 		/* send a copy of the saved skb */
+ 		skb1 = skb_clone(forw_packet->skb, GFP_ATOMIC);
+ 		if (skb1)
+ 			batadv_send_broadcast_skb(skb1, hard_iface);
+ 
++put_hardif:
+ 		batadv_hardif_put(hard_iface);
+ 	}
+ 	rcu_read_unlock();
+diff --git a/net/batman-adv/sysfs.c b/net/batman-adv/sysfs.c
+index fe9ca94..48d0b91 100644
+--- a/net/batman-adv/sysfs.c
++++ b/net/batman-adv/sysfs.c
+@@ -135,6 +135,17 @@ struct batadv_attribute batadv_attr_vlan_##_name = {	\
+ 	.store  = _store,				\
+ }
+ 
++/* Use this, if you have customized show and store functions
++ * for hard interface attrs
++ */
++#define BATADV_ATTR_HIF(_name, _mode, _show, _store)	\
++struct batadv_attribute batadv_attr_hif_##_name = {	\
++	.attr = {.name = __stringify(_name),		\
++		 .mode = _mode },			\
++	.show   = _show,				\
++	.store  = _store,				\
++};
++
+ /* Use this, if you have customized show and store functions */
+ #define BATADV_ATTR(_name, _mode, _show, _store)	\
+ struct batadv_attribute batadv_attr_##_name = {		\
+@@ -294,6 +305,52 @@ ssize_t batadv_show_##_name(struct kobject *kobj,			\
+ 	static BATADV_ATTR(_name, _mode, batadv_show_##_name,		\
+ 			   batadv_store_##_name)
+ 
++#define BATADV_ATTR_HIF_STORE_BOOL(_name, _post_func)			\
++ssize_t batadv_store_hif_##_name(struct kobject *kobj,			\
++				 struct attribute *attr, char *buff,	\
++				 size_t count)				\
++{									\
++	struct net_device *net_dev = batadv_kobj_to_netdev(kobj);	\
++	struct batadv_hard_iface *hard_iface;				\
++	size_t res;							\
++									\
++	hard_iface = batadv_hardif_get_by_netdev(net_dev);		\
++	if (!hard_iface)						\
++		return 0;						\
++									\
++	res = __batadv_store_bool_attr(buff, count, _post_func,		\
++					      attr, &hard_iface->_name,	\
++					      hard_iface->soft_iface);	\
++	batadv_hardif_put(hard_iface);					\
++	return res;							\
++}
++
++#define BATADV_ATTR_HIF_SHOW_BOOL(_name)				\
++ssize_t batadv_show_hif_##_name(struct kobject *kobj,			\
++				struct attribute *attr, char *buff)	\
++{									\
++	struct net_device *net_dev = batadv_kobj_to_netdev(kobj);	\
++	struct batadv_hard_iface *hard_iface;				\
++	size_t res;							\
++									\
++	hard_iface = batadv_hardif_get_by_netdev(net_dev);		\
++	if (!hard_iface)						\
++		return 0;						\
++									\
++	res = sprintf(buff, "%s\n",					\
++		      atomic_read(&hard_iface->_name) == 0 ?		\
++				"disabled" : "enabled");		\
++	batadv_hardif_put(hard_iface);					\
++	return res;							\
++}
++
++/* Use this, if you are going to turn a [name] in the vlan struct on or off */
++#define BATADV_ATTR_HIF_BOOL(_name, _mode, _post_func)			\
++	static BATADV_ATTR_HIF_STORE_BOOL(_name, _post_func)		\
++	static BATADV_ATTR_HIF_SHOW_BOOL(_name)				\
++	static BATADV_ATTR_HIF(_name, _mode, batadv_show_hif_##_name,	\
++			       batadv_store_hif_##_name)
++
+ static int batadv_store_bool_attr(char *buff, size_t count,
+ 				  struct net_device *net_dev,
+ 				  const char *attr_name, atomic_t *attr,
+@@ -994,6 +1051,7 @@ static ssize_t batadv_show_throughput_override(struct kobject *kobj,
+ static BATADV_ATTR(mesh_iface, S_IRUGO | S_IWUSR, batadv_show_mesh_iface,
+ 		   batadv_store_mesh_iface);
+ static BATADV_ATTR(iface_status, S_IRUGO, batadv_show_iface_status, NULL);
++BATADV_ATTR_HIF_BOOL(no_rebroadcast, S_IRUGO | S_IWUSR, NULL);
+ #ifdef CONFIG_BATMAN_ADV_BATMAN_V
+ BATADV_ATTR_HIF_UINT(elp_interval, bat_v.elp_interval, S_IRUGO | S_IWUSR,
+ 		     2 * BATADV_JITTER, INT_MAX, NULL);
+@@ -1005,6 +1063,7 @@ static BATADV_ATTR(throughput_override, S_IRUGO | S_IWUSR,
+ static struct batadv_attribute *batadv_batman_attrs[] = {
+ 	&batadv_attr_mesh_iface,
+ 	&batadv_attr_iface_status,
++	&batadv_attr_hif_no_rebroadcast,
+ #ifdef CONFIG_BATMAN_ADV_BATMAN_V
+ 	&batadv_attr_elp_interval,
+ 	&batadv_attr_throughput_override,
+diff --git a/net/batman-adv/types.h b/net/batman-adv/types.h
+index a64522c..6b9d35a 100644
+--- a/net/batman-adv/types.h
++++ b/net/batman-adv/types.h
+@@ -157,6 +157,7 @@ struct batadv_hard_iface {
+ 	struct hlist_head neigh_list;
+ 	/* neigh_list_lock protects: neigh_list */
+ 	spinlock_t neigh_list_lock;
++	atomic_t no_rebroadcast;
+ };
+ 
+ /**
